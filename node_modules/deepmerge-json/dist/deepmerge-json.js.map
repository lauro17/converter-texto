{"version":3,"file":"deepmerge-json.js","sources":["../src/deepmerge-json.js"],"sourcesContent":["const FK = '__proto__';\nconst directReplace = (_, pos) => pos;\nconst shallowCopyArray = (_, pos) => pos.map(e => merge(e));\nconst shallowCopyObj = (_, pos) => {\n\tif (pos && pos.hasOwnProperty('__proto__')) {\n\t\tconst res = {};\n\t\tfor (let e in pos) {\n\t\t\tif (e !== FK) res[e] = pos[e];\n\t\t}\n\t\treturn res;\n\t}\n\treturn Object.assign({}, pos);\n};\n\n// const _clone = (_, pos) => merge(pos);\n\n\nconst mergeObjects = function (pre, pos) {\n\tpre = shallowCopyObj(undefined, pre);\n\tObject.keys(pos).forEach(k => { if (k !== FK) pre[k] = merge(pre[k], pos[k]); });\n\treturn pre;\n};\n\nconst mergeArrays = function (pre, pos) {\n\tpre = shallowCopyArray(undefined, pre);\n\tpos.forEach((v, i) => (pre[i] = merge(pre[i], v)));\n\treturn pre;\n};\n\nconst mergeArrayWithParams = function (pre, pos) {\n\tpre = shallowCopyArray(undefined, pre);\n\tObject.keys(pos).forEach(key => {\n\t\tif (key !== FK) {\n\t\t\tpre = key in arrayMergeFn ? arrayMergeFn[key](pre, pos[key]) : pos;\n\t\t}\n\t});\n\n\treturn pre;\n};\n\nconst indexedReplace = function (pre, pos) {\n\tpre = shallowCopyArray(undefined, pre);\n\tlet kn;\n\tObject.keys(pos).forEach(k => {\n\t\tkn = Number.parseInt(k);\n\t\tif (kn < 0 || Number.isNaN(kn)) throw Error(`Invalid index for $replace: ${k}`);\n\t\tpre[kn] = merge.clone(pos[k]);\n\t});\n\treturn pre;\n};\n\nconst indexedMerge = function (pre, pos) {\n\tpre = pre.slice();\n\tlet kn;\n\tObject.keys(pos).forEach(k => {\n\t\tkn = Number.parseInt(k);\n\t\tif (kn < 0 || Number.isNaN(kn)) throw Error(`Invalid index for $merge: ${k}`);\n\t\tpre[kn] = merge(pre[kn], pos[k]);\n\t});\n\treturn pre;\n};\n\nconst insert = function (pre, pos) {\n\tpre = shallowCopyArray(undefined, pre);\n\tlet kn;\n\tObject.keys(pos).forEach(k => {\n\t\tkn = Number.parseInt(k);\n\t\tif (Number.isNaN(kn)) throw Error(`Invalid index for $insert: ${k}`);\n\t\tpre.splice(kn, 0, pos[k]);\n\t});\n\treturn pre;\n};\n\nconst arrayMergeFn = {\n\t$push: (pre, pos) => pre.concat(pos),\n\t$append: (pre, pos) => pre.concat(pos),\n\t$prepend: (pre, pos) => pos.concat(pre),\n\t$replace: indexedReplace,\n\t$merge: indexedMerge,\n\t$insert: insert,\n\t$set: shallowCopyArray,\t// TODO clone\n};\n\nconst fn = {\n\too: mergeObjects,\n\toa: shallowCopyObj,\t\t// TODO clone\n\tob: directReplace,\n\n\taa: mergeArrays,\n\tao: mergeArrayWithParams,\n\tab: directReplace,\n\n\tbb: directReplace,\n\tbo: shallowCopyObj,\t\t// TODO clone\n\tba: shallowCopyArray,\t// TODO clone\n};\n\n/**\n * Deeply merge objects. Properties from the second parameter overrides the ones with the same path\n * in the first object.\n * \n * Arrays can be merged or changed with `$push`, `$prepend`, `$set`, `$replace` or `$insert`\n * operations. Multiple operations can be passed.\n * \n * @see {@link https://github.com/kleber-swf/deepmerge-json#readme}\n * @param {any} pre Base object\n * @param {any} pos Object that will overrite base properties. If none is given, the first object is\n * \t\t\t  deeply cloned\n * @returns {any} A deep clone object containing a combination of all\n * \t\t\tproperties from pre and pos arguments.\n */\nfunction merge(pre, pos) {\n\tif (pos === undefined) {\n\t\tif (pre == null) return pre;\n\t\tif (Array.isArray(pre)) pos = [];\n\t\telse if (typeof pre === 'object') pos = {};\n\t\telse pos = pre;\n\t} else if (pos === null) {\n\t\treturn null;\n\t}\n\tconst tt = Array.isArray(pre) ? 'a' : typeof pre === 'object' ? 'o' : 'b';\n\tconst st = Array.isArray(pos) ? 'a' : typeof pos === 'object' ? 'o' : 'b';\n\treturn fn[tt + st](pre, pos);\n}\n\n/**\n * Deeply clones an object. This method is an alias to {@linkcode merge} with a single parameter.\n * \n * @template T\n * @param {T} obj The object to be cloned\n * @returns {T} The object passed as parameter deeply cloned.\n */\nmerge.clone = obj => merge(obj);\n\n/**\n * Merges multiple objects. It respects the order of the parameters and the operations just like\n * expected if you call {@linkcode merge} multiple times passing the last result as the first\n * parameter to the next call.\n * \n * @param {any} pre The required first object\n * @param  {...any} args Subsequential objects. Keep in mind that their order matters.\n * @returns {any} A deeply merged object containing all of the parameters\n */\nmerge.multi = (pre, ...args) => {\n\tif (!args) return merge(pre);\n\tfor (let i = 0; i < args.length; i++) {\n\t\tpre = merge(pre, args[i]);\n\t}\n\treturn pre;\n}\n\nexport default merge;\n\n// TODO Test the following approach: clone both objects at the start so we won't need to\n// keep cloning the objects individually during the process.\n// 1. we can clone with JSON.parse(JSON.stringify) and check the __proto__ during the merge\n// 2. we can clone manually and check for __proto__ during this phase"],"names":[],"mappings":";;;;;;CAAA,MAAM,EAAE,GAAG,WAAW,CAAC;CACvB,MAAM,aAAa,GAAG,CAAC,CAAC,EAAE,GAAG,KAAK,GAAG,CAAC;CACtC,MAAM,gBAAgB,GAAG,CAAC,CAAC,EAAE,GAAG,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;CAC5D,MAAM,cAAc,GAAG,CAAC,CAAC,EAAE,GAAG,KAAK;CACnC,CAAC,IAAI,GAAG,IAAI,GAAG,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE;CAC7C,EAAE,MAAM,GAAG,GAAG,EAAE,CAAC;CACjB,EAAE,KAAK,IAAI,CAAC,IAAI,GAAG,EAAE;CACrB,GAAG,IAAI,CAAC,KAAK,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;CACjC,GAAG;CACH,EAAE,OAAO,GAAG,CAAC;CACb,EAAE;CACF,CAAC,OAAO,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;CAC/B,CAAC,CAAC;AACF;CACA;AACA;AACA;CACA,MAAM,YAAY,GAAG,UAAU,GAAG,EAAE,GAAG,EAAE;CACzC,CAAC,GAAG,GAAG,cAAc,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;CACtC,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;CAClF,CAAC,OAAO,GAAG,CAAC;CACZ,CAAC,CAAC;AACF;CACA,MAAM,WAAW,GAAG,UAAU,GAAG,EAAE,GAAG,EAAE;CACxC,CAAC,GAAG,GAAG,gBAAgB,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;CACxC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;CACpD,CAAC,OAAO,GAAG,CAAC;CACZ,CAAC,CAAC;AACF;CACA,MAAM,oBAAoB,GAAG,UAAU,GAAG,EAAE,GAAG,EAAE;CACjD,CAAC,GAAG,GAAG,gBAAgB,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;CACxC,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG,IAAI;CACjC,EAAE,IAAI,GAAG,KAAK,EAAE,EAAE;CAClB,GAAG,GAAG,GAAG,GAAG,IAAI,YAAY,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;CACtE,GAAG;CACH,EAAE,CAAC,CAAC;AACJ;CACA,CAAC,OAAO,GAAG,CAAC;CACZ,CAAC,CAAC;AACF;CACA,MAAM,cAAc,GAAG,UAAU,GAAG,EAAE,GAAG,EAAE;CAC3C,CAAC,GAAG,GAAG,gBAAgB,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;CACxC,CAAC,IAAI,EAAE,CAAC;CACR,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI;CAC/B,EAAE,EAAE,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;CAC1B,EAAE,IAAI,EAAE,GAAG,CAAC,IAAI,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC,CAAC,4BAA4B,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;CAClF,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;CAChC,EAAE,CAAC,CAAC;CACJ,CAAC,OAAO,GAAG,CAAC;CACZ,CAAC,CAAC;AACF;CACA,MAAM,YAAY,GAAG,UAAU,GAAG,EAAE,GAAG,EAAE;CACzC,CAAC,GAAG,GAAG,GAAG,CAAC,KAAK,EAAE,CAAC;CACnB,CAAC,IAAI,EAAE,CAAC;CACR,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI;CAC/B,EAAE,EAAE,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;CAC1B,EAAE,IAAI,EAAE,GAAG,CAAC,IAAI,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC,CAAC,0BAA0B,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;CAChF,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;CACnC,EAAE,CAAC,CAAC;CACJ,CAAC,OAAO,GAAG,CAAC;CACZ,CAAC,CAAC;AACF;CACA,MAAM,MAAM,GAAG,UAAU,GAAG,EAAE,GAAG,EAAE;CACnC,CAAC,GAAG,GAAG,gBAAgB,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;CACxC,CAAC,IAAI,EAAE,CAAC;CACR,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI;CAC/B,EAAE,EAAE,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;CAC1B,EAAE,IAAI,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,MAAM,KAAK,CAAC,CAAC,2BAA2B,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;CACvE,EAAE,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;CAC5B,EAAE,CAAC,CAAC;CACJ,CAAC,OAAO,GAAG,CAAC;CACZ,CAAC,CAAC;AACF;CACA,MAAM,YAAY,GAAG;CACrB,CAAC,KAAK,EAAE,CAAC,GAAG,EAAE,GAAG,KAAK,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC;CACrC,CAAC,OAAO,EAAE,CAAC,GAAG,EAAE,GAAG,KAAK,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC;CACvC,CAAC,QAAQ,EAAE,CAAC,GAAG,EAAE,GAAG,KAAK,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC;CACxC,CAAC,QAAQ,EAAE,cAAc;CACzB,CAAC,MAAM,EAAE,YAAY;CACrB,CAAC,OAAO,EAAE,MAAM;CAChB,CAAC,IAAI,EAAE,gBAAgB;CACvB,CAAC,CAAC;AACF;CACA,MAAM,EAAE,GAAG;CACX,CAAC,EAAE,EAAE,YAAY;CACjB,CAAC,EAAE,EAAE,cAAc;CACnB,CAAC,EAAE,EAAE,aAAa;AAClB;CACA,CAAC,EAAE,EAAE,WAAW;CAChB,CAAC,EAAE,EAAE,oBAAoB;CACzB,CAAC,EAAE,EAAE,aAAa;AAClB;CACA,CAAC,EAAE,EAAE,aAAa;CAClB,CAAC,EAAE,EAAE,cAAc;CACnB,CAAC,EAAE,EAAE,gBAAgB;CACrB,CAAC,CAAC;AACF;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,SAAS,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE;CACzB,CAAC,IAAI,GAAG,KAAK,SAAS,EAAE;CACxB,EAAE,IAAI,GAAG,IAAI,IAAI,EAAE,OAAO,GAAG,CAAC;CAC9B,EAAE,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,EAAE,CAAC;CACnC,OAAO,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE,GAAG,GAAG,EAAE,CAAC;CAC7C,OAAO,GAAG,GAAG,GAAG,CAAC;CACjB,EAAE,MAAM,IAAI,GAAG,KAAK,IAAI,EAAE;CAC1B,EAAE,OAAO,IAAI,CAAC;CACd,EAAE;CACF,CAAC,MAAM,EAAE,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,OAAO,GAAG,KAAK,QAAQ,GAAG,GAAG,GAAG,GAAG,CAAC;CAC3E,CAAC,MAAM,EAAE,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,OAAO,GAAG,KAAK,QAAQ,GAAG,GAAG,GAAG,GAAG,CAAC;CAC3E,CAAC,OAAO,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;CAC9B,CAAC;AACD;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,KAAK,CAAC,KAAK,GAAG,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC;AAChC;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA;CACA,KAAK,CAAC,KAAK,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,KAAK;CAChC,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC;CAC9B,CAAC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;CACvC,EAAE,GAAG,GAAG,KAAK,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;CAC5B,EAAE;CACF,CAAC,OAAO,GAAG,CAAC;CACZ,EAAC;AAGD;CACA;CACA;CACA;CACA;;;;;;;;"}