!function(e,r){"object"==typeof exports&&"undefined"!=typeof module?module.exports=r():"function"==typeof define&&define.amd?define(r):(e="undefined"!=typeof globalThis?globalThis:e||self).merge=r()}(this,(function(){"use strict";const e="__proto__",r=(e,r)=>r,t=(e,r)=>r.map((e=>c(e))),n=(r,t)=>{if(t&&t.hasOwnProperty("__proto__")){const r={};for(let n in t)n!==e&&(r[n]=t[n]);return r}return Object.assign({},t)},o={$push:(e,r)=>e.concat(r),$append:(e,r)=>e.concat(r),$prepend:(e,r)=>r.concat(e),$replace:function(e,r){let n;return e=t(0,e),Object.keys(r).forEach((t=>{if(n=Number.parseInt(t),n<0||Number.isNaN(n))throw Error(`Invalid index for $replace: ${t}`);e[n]=c.clone(r[t])})),e},$merge:function(e,r){let t;return e=e.slice(),Object.keys(r).forEach((n=>{if(t=Number.parseInt(n),t<0||Number.isNaN(t))throw Error(`Invalid index for $merge: ${n}`);e[t]=c(e[t],r[n])})),e},$insert:function(e,r){let n;return e=t(0,e),Object.keys(r).forEach((t=>{if(n=Number.parseInt(t),Number.isNaN(n))throw Error(`Invalid index for $insert: ${t}`);e.splice(n,0,r[t])})),e},$set:t},i={oo:function(r,t){return r=n(0,r),Object.keys(t).forEach((n=>{n!==e&&(r[n]=c(r[n],t[n]))})),r},oa:n,ob:r,aa:function(e,r){return e=t(0,e),r.forEach(((r,t)=>e[t]=c(e[t],r))),e},ao:function(r,n){return r=t(0,r),Object.keys(n).forEach((t=>{t!==e&&(r=t in o?o[t](r,n[t]):n)})),r},ab:r,bb:r,bo:n,ba:t};function c(e,r){if(void 0===r){if(null==e)return e;r=Array.isArray(e)?[]:"object"==typeof e?{}:e}else if(null===r)return null;const t=Array.isArray(e)?"a":"object"==typeof e?"o":"b",n=Array.isArray(r)?"a":"object"==typeof r?"o":"b";return i[t+n](e,r)}return c.clone=e=>c(e),c.multi=(e,...r)=>{if(!r)return c(e);for(let t=0;t<r.length;t++)e=c(e,r[t]);return e},c}));
//# sourceMappingURL=deepmerge-json.min.js.map
