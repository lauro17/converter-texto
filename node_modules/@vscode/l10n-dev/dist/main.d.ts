/**
 * @public
 * Get pseudo localized l10n data for a given l10n bundle
 * @param dataToLocalize - package.nls.json or bundle.l10n.json contents parsed
 * @param languages - languages to translate to
 * @param config - configuration for the Azure Translator instance
 * @returns l10nJsonFormat[] where each element is the localized data for that respective language in the languages array
 */
export declare function getL10nAzureLocalized(dataToLocalize: l10nJsonFormat, languages: string[], config: {
    azureTranslatorKey: string;
    azureTranslatorRegion: string;
}): Promise<l10nJsonFormat[]>;

/**
 * @public
 * Import XLF data into an array of l10nJsonDetails
 * @param xlfContents - XLF data as a string
 * @returns Array of l10nJsonDetails
 */
export declare function getL10nFilesFromXlf(xlfContents: string): Promise<l10nJsonDetails[]>;

/**
 * @public
 * Export strings from source files
 * @param fileContents - Array of file contents to analyze
 * @returns l10nJsonFormat
 */
export declare function getL10nJson(fileContents: IScriptFile[]): Promise<l10nJsonFormat>;

/**
 * @public
 * Get pseudo localized l10n data for a given l10n bundle
 * @param dataToLocalize - package.nls.json or bundle.l10n.json contents parsed
 * @returns l10nJsonFormat
 */
export declare function getL10nPseudoLocalized(dataToLocalize: l10nJsonFormat): l10nJsonFormat;

/**
 * @public
 * Get XLF data from a package.nls.json and computed l10n data
 * @param l10nFileContents - a map of file names to {@link l10nJsonFormat} (basically the parsed contents of those files)
 * @param options - {@link L10nToXlfOptions} that influence how the XLF file should be generated
 * @returns XLF data as a string
 */
export declare function getL10nXlf(l10nFileContents: Map<string, l10nJsonFormat>, options?: L10nToXlfOptions): string;

/**
 * @public
 * Data structure of a script file
 */
export declare interface IScriptFile {
    contents: string;
    extension: string;
}

/**
 * @public
 * Details of a file extracted from an XLF file
 */
export declare interface l10nJsonDetails {
    messages: l10nJsonFormat;
    name: string;
    language: string;
}

/**
 * @public
 * The format of package.nls.json and l10n bundle files
 */
export declare interface l10nJsonFormat {
    [key: string]: l10nJsonMessageFormat;
}

/**
 * @public
 * The format of a message in a bundle.
 */
export declare type l10nJsonMessageFormat = string | {
    message: string;
    comment: string[];
};

/**
 * @public
 * The options for the l10n JSON to XLF conversion.
 */
export declare interface L10nToXlfOptions {
    /**
     * The language that the source is in. Defaults to `en`.
     */
    sourceLanguage?: string;
}

export { }
