{"version":3,"file":"customClient.js","sourceRoot":"","sources":["../../src/customClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { getClient, ClientOptions } from \"@azure-rest/core-client\";\nimport { logger } from \"./generated/logger\";\nimport * as coreRestPipeline from \"@azure/core-rest-pipeline\";\nimport { TextTranslationClient } from \"./generated/clientDefinitions\";\nimport {\n  DEFAULT_SCOPE,\n  TranslatorCredential,\n  TranslatorTokenCredential,\n  TranslatorAuthenticationPolicy,\n  TranslatorAzureKeyAuthenticationPolicy,\n  TranslatorTokenCredentialAuthenticationPolicy,\n} from \"./authentication\";\nimport { AzureKeyCredential, KeyCredential, TokenCredential } from \"@azure/core-auth\";\n\nconst DEFAULT_ENPOINT = \"https://api.cognitive.microsofttranslator.com\";\nconst PLATFORM_HOST = \"cognitiveservices\";\nconst PLATFORM_PATH = \"/translator/text/v3.0\";\n\nfunction isKeyCredential(credential: any): credential is KeyCredential {\n  return (credential as KeyCredential)?.key !== undefined;\n}\n\nfunction isTranslatorKeyCredential(credential: any): credential is TranslatorCredential {\n  return (credential as TranslatorCredential)?.key !== undefined;\n}\n\nfunction isTokenCredential(credential: any): credential is TokenCredential {\n  return (credential as TokenCredential)?.getToken !== undefined;\n}\n\nfunction isTranslatorTokenCredential(credential: any): credential is TranslatorTokenCredential {\n  return (\n    (credential as TranslatorTokenCredential)?.tokenCredential !== undefined &&\n    (credential as TranslatorTokenCredential)?.azureResourceId !== undefined\n  );\n}\n\nfunction isCredentials(credential: any): boolean {\n  return (\n    isKeyCredential(credential) ||\n    isTranslatorKeyCredential(credential) ||\n    isTokenCredential(credential) ||\n    isTranslatorTokenCredential(credential)\n  );\n}\n\n/**\n * Initialize a new instance of `TextTranslationClient`\n * @param credential type: TranslatorCredential | TranslatorTokenCredential | KeyCredential |TokenCredential, credentials\n *      used to authenticate the service with.\n * @param options type: ClientOptions, the parameter for all optional parameters\n */\nexport default function createClient(\n  credential: TranslatorCredential | TranslatorTokenCredential | KeyCredential | TokenCredential,\n  options?: ClientOptions,\n): TextTranslationClient;\n\n/**\n * Initialize a new instance of `TextTranslationClient`\n * @param endpoint type: string, Supported Text Translation endpoints (protocol and hostname, for example:\n *     https://api.cognitive.microsofttranslator.com).\n * @param options type: ClientOptions, the parameter for all optional parameters\n */\nexport default function createClient(\n  endpoint: string,\n  options?: ClientOptions,\n): TextTranslationClient;\n\n/**\n * Initialize a new instance of `TextTranslationClient`\n * @param endpoint type: string, Supported Text Translation endpoints (protocol and hostname, for example:\n *     https://api.cognitive.microsofttranslator.com).\n * @param credential type: TranslatorCredential | TranslatorTokenCredential | KeyCredential |TokenCredential, credentials\n *      used to authenticate the service with.\n * @param options type: ClientOptions, the parameter for all optional parameters\n */\nexport default function createClient(\n  endpoint: string,\n  credential: TranslatorCredential | TranslatorTokenCredential | KeyCredential | TokenCredential,\n  options?: ClientOptions,\n): TextTranslationClient;\n\n// Implementation\nexport default function createClient(\n  arg1?:\n    | string\n    | (TranslatorCredential | TranslatorTokenCredential | KeyCredential | TokenCredential),\n  arg2?:\n    | (TranslatorCredential | TranslatorTokenCredential | KeyCredential | TokenCredential)\n    | ClientOptions,\n  arg3?: ClientOptions,\n): TextTranslationClient {\n  let serviceEndpoint: string;\n\n  let endpoint: string | undefined;\n  let options: ClientOptions | undefined;\n  let credential:\n    | TranslatorCredential\n    | TranslatorTokenCredential\n    | KeyCredential\n    | TokenCredential\n    | undefined;\n\n  if (typeof arg1 === \"string\") {\n    endpoint = arg1;\n  }\n\n  if (typeof arg1 !== \"string\" && isCredentials(arg1)) {\n    credential = arg1;\n    options = arg2 as ClientOptions;\n  } else if (isCredentials(arg2)) {\n    credential = arg2 as\n      | TranslatorCredential\n      | TranslatorTokenCredential\n      | KeyCredential\n      | TokenCredential;\n    options = arg3;\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  options.apiVersion = options.apiVersion ?? \"3.0\";\n\n  if (!endpoint) {\n    serviceEndpoint = DEFAULT_ENPOINT;\n  } else if (endpoint.toLowerCase().indexOf(PLATFORM_HOST) !== -1) {\n    serviceEndpoint = `${endpoint}${PLATFORM_PATH}`;\n  } else {\n    serviceEndpoint = endpoint;\n  }\n\n  const baseUrl = options.baseUrl ?? `${serviceEndpoint}`;\n\n  const userAgentInfo = `azsdk-js-ai-translation-text-rest/1.0.0`;\n  const userAgentPrefix =\n    options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n      ? `${options.userAgentOptions.userAgentPrefix} ${userAgentInfo}`\n      : `${userAgentInfo}`;\n  options = {\n    ...options,\n    userAgentOptions: {\n      userAgentPrefix,\n    },\n    loggingOptions: {\n      logger: options.loggingOptions?.logger ?? logger.info,\n    },\n  };\n\n  const client = getClient(baseUrl, options) as TextTranslationClient;\n\n  if (isTranslatorKeyCredential(credential)) {\n    const mtAuthneticationPolicy = new TranslatorAuthenticationPolicy(\n      credential as TranslatorCredential,\n    );\n    client.pipeline.addPolicy(mtAuthneticationPolicy);\n  } else if (isKeyCredential(credential)) {\n    const mtKeyAuthenticationPolicy = new TranslatorAzureKeyAuthenticationPolicy(\n      credential as AzureKeyCredential,\n    );\n    client.pipeline.addPolicy(mtKeyAuthenticationPolicy);\n  } else if (isTokenCredential(credential)) {\n    client.pipeline.addPolicy(\n      coreRestPipeline.bearerTokenAuthenticationPolicy({\n        credential: credential as TokenCredential,\n        scopes: options?.credentials?.scopes ?? DEFAULT_SCOPE,\n      }),\n    );\n  } else if (isTranslatorTokenCredential(credential)) {\n    client.pipeline.addPolicy(\n      coreRestPipeline.bearerTokenAuthenticationPolicy({\n        credential: (credential as TranslatorTokenCredential).tokenCredential,\n        scopes: options?.credentials?.scopes ?? DEFAULT_SCOPE,\n      }),\n    );\n    client.pipeline.addPolicy(\n      new TranslatorTokenCredentialAuthenticationPolicy(credential as TranslatorTokenCredential),\n    );\n  }\n\n  return client;\n}\n"]}