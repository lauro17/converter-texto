'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var coreClient = require('@azure-rest/core-client');
var logger$1 = require('@azure/logger');
var coreRestPipeline = require('@azure/core-rest-pipeline');

function _interopNamespaceDefault(e) {
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n.default = e;
    return Object.freeze(n);
}

var coreRestPipeline__namespace = /*#__PURE__*/_interopNamespaceDefault(coreRestPipeline);

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const logger = logger$1.createClientLogger("ai-translation-text");

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const APIM_KEY_HEADER_NAME = "Ocp-Apim-Subscription-Key";
const APIM_REGION_HEADER_NAME = "Ocp-Apim-Subscription-Region";
const APIM_RESOURCE_ID = "Ocp-Apim-ResourceId";
const DEFAULT_SCOPE = "https://cognitiveservices.azure.com/.default";
class TranslatorAuthenticationPolicy {
    constructor(credential) {
        this.name = "TranslatorAuthenticationPolicy";
        this.credential = credential;
    }
    sendRequest(request, next) {
        request.headers.set(APIM_KEY_HEADER_NAME, this.credential.key);
        request.headers.set(APIM_REGION_HEADER_NAME, this.credential.region);
        return next(request);
    }
}
class TranslatorAzureKeyAuthenticationPolicy {
    constructor(credential) {
        this.name = "TranslatorAzureKeyAuthenticationPolicy";
        this.credential = credential;
    }
    sendRequest(request, next) {
        request.headers.set(APIM_KEY_HEADER_NAME, this.credential.key);
        return next(request);
    }
}
class TranslatorTokenCredentialAuthenticationPolicy {
    constructor(credential) {
        this.name = "TranslatorTokenCredentialAuthenticationPolicy";
        this.credential = credential;
    }
    sendRequest(request, next) {
        request.headers.set(APIM_REGION_HEADER_NAME, this.credential.region);
        request.headers.set(APIM_RESOURCE_ID, this.credential.azureResourceId);
        return next(request);
    }
}

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const DEFAULT_ENPOINT = "https://api.cognitive.microsofttranslator.com";
const PLATFORM_HOST = "cognitiveservices";
const PLATFORM_PATH = "/translator/text/v3.0";
function isKeyCredential(credential) {
    return (credential === null || credential === void 0 ? void 0 : credential.key) !== undefined;
}
function isTranslatorKeyCredential(credential) {
    return (credential === null || credential === void 0 ? void 0 : credential.key) !== undefined;
}
function isTokenCredential(credential) {
    return (credential === null || credential === void 0 ? void 0 : credential.getToken) !== undefined;
}
function isTranslatorTokenCredential(credential) {
    return ((credential === null || credential === void 0 ? void 0 : credential.tokenCredential) !== undefined &&
        (credential === null || credential === void 0 ? void 0 : credential.azureResourceId) !== undefined);
}
function isCredentials(credential) {
    return (isKeyCredential(credential) ||
        isTranslatorKeyCredential(credential) ||
        isTokenCredential(credential) ||
        isTranslatorTokenCredential(credential));
}
// Implementation
function createClient(arg1, arg2, arg3) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    let serviceEndpoint;
    let endpoint;
    let options;
    let credential;
    if (typeof arg1 === "string") {
        endpoint = arg1;
    }
    if (typeof arg1 !== "string" && isCredentials(arg1)) {
        credential = arg1;
        options = arg2;
    }
    else if (isCredentials(arg2)) {
        credential = arg2;
        options = arg3;
    }
    if (!options) {
        options = {};
    }
    options.apiVersion = (_a = options.apiVersion) !== null && _a !== void 0 ? _a : "3.0";
    if (!endpoint) {
        serviceEndpoint = DEFAULT_ENPOINT;
    }
    else if (endpoint.toLowerCase().indexOf(PLATFORM_HOST) !== -1) {
        serviceEndpoint = `${endpoint}${PLATFORM_PATH}`;
    }
    else {
        serviceEndpoint = endpoint;
    }
    const baseUrl = (_b = options.baseUrl) !== null && _b !== void 0 ? _b : `${serviceEndpoint}`;
    const userAgentInfo = `azsdk-js-ai-translation-text-rest/1.0.0`;
    const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${userAgentInfo}`
        : `${userAgentInfo}`;
    options = Object.assign(Object.assign({}, options), { userAgentOptions: {
            userAgentPrefix,
        }, loggingOptions: {
            logger: (_d = (_c = options.loggingOptions) === null || _c === void 0 ? void 0 : _c.logger) !== null && _d !== void 0 ? _d : logger.info,
        } });
    const client = coreClient.getClient(baseUrl, options);
    if (isTranslatorKeyCredential(credential)) {
        const mtAuthneticationPolicy = new TranslatorAuthenticationPolicy(credential);
        client.pipeline.addPolicy(mtAuthneticationPolicy);
    }
    else if (isKeyCredential(credential)) {
        const mtKeyAuthenticationPolicy = new TranslatorAzureKeyAuthenticationPolicy(credential);
        client.pipeline.addPolicy(mtKeyAuthenticationPolicy);
    }
    else if (isTokenCredential(credential)) {
        client.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
            credential: credential,
            scopes: (_f = (_e = options === null || options === void 0 ? void 0 : options.credentials) === null || _e === void 0 ? void 0 : _e.scopes) !== null && _f !== void 0 ? _f : DEFAULT_SCOPE,
        }));
    }
    else if (isTranslatorTokenCredential(credential)) {
        client.pipeline.addPolicy(coreRestPipeline__namespace.bearerTokenAuthenticationPolicy({
            credential: credential.tokenCredential,
            scopes: (_h = (_g = options === null || options === void 0 ? void 0 : options.credentials) === null || _g === void 0 ? void 0 : _g.scopes) !== null && _h !== void 0 ? _h : DEFAULT_SCOPE,
        }));
        client.pipeline.addPolicy(new TranslatorTokenCredentialAuthenticationPolicy(credential));
    }
    return client;
}

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
const responseMap = {
    "GET /languages": ["200"],
    "POST /translate": ["200"],
    "POST /transliterate": ["200"],
    "POST /breaksentence": ["200"],
    "POST /dictionary/lookup": ["200"],
    "POST /dictionary/examples": ["200"],
};
function isUnexpected(response) {
    const lroOriginal = response.headers["x-ms-original-url"];
    const url = new URL(lroOriginal !== null && lroOriginal !== void 0 ? lroOriginal : response.request.url);
    const method = response.request.method;
    let pathDetails = responseMap[`${method} ${url.pathname}`];
    if (!pathDetails) {
        pathDetails = getParametrizedPathSuccess(method, url.pathname);
    }
    return !pathDetails.includes(response.status);
}
function getParametrizedPathSuccess(method, path) {
    var _a, _b, _c, _d;
    const pathParts = path.split("/");
    // Traverse list to match the longest candidate
    // matchedLen: the length of candidate path
    // matchedValue: the matched status code array
    let matchedLen = -1, matchedValue = [];
    // Iterate the responseMap to find a match
    for (const [key, value] of Object.entries(responseMap)) {
        // Extracting the path from the map key which is in format
        // GET /path/foo
        if (!key.startsWith(method)) {
            continue;
        }
        const candidatePath = getPathFromMapKey(key);
        // Get each part of the url path
        const candidateParts = candidatePath.split("/");
        // track if we have found a match to return the values found.
        let found = true;
        for (let i = candidateParts.length - 1, j = pathParts.length - 1; i >= 1 && j >= 1; i--, j--) {
            if (((_a = candidateParts[i]) === null || _a === void 0 ? void 0 : _a.startsWith("{")) &&
                ((_b = candidateParts[i]) === null || _b === void 0 ? void 0 : _b.indexOf("}")) !== -1) {
                const start = candidateParts[i].indexOf("}") + 1, end = (_c = candidateParts[i]) === null || _c === void 0 ? void 0 : _c.length;
                // If the current part of the candidate is a "template" part
                // Try to use the suffix of pattern to match the path
                // {guid} ==> $
                // {guid}:export ==> :export$
                const isMatched = new RegExp(`${(_d = candidateParts[i]) === null || _d === void 0 ? void 0 : _d.slice(start, end)}`).test(pathParts[j] || "");
                if (!isMatched) {
                    found = false;
                    break;
                }
                continue;
            }
            // If the candidate part is not a template and
            // the parts don't match mark the candidate as not found
            // to move on with the next candidate path.
            if (candidateParts[i] !== pathParts[j]) {
                found = false;
                break;
            }
        }
        // We finished evaluating the current candidate parts
        // Update the matched value if and only if we found the longer pattern
        if (found && candidatePath.length > matchedLen) {
            matchedLen = candidatePath.length;
            matchedValue = value;
        }
    }
    return matchedValue;
}
function getPathFromMapKey(mapKey) {
    const pathStart = mapKey.indexOf("/");
    return mapKey.slice(pathStart);
}

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
function buildMultiCollection(items, parameterName) {
    return items
        .map((item, index) => {
        if (index === 0) {
            return item;
        }
        return `${parameterName}=${item}`;
    })
        .join("&");
}

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

exports.buildMultiCollection = buildMultiCollection;
exports.default = createClient;
exports.isUnexpected = isUnexpected;
//# sourceMappingURL=index.js.map
