{"version":3,"file":"index.js","sources":["../src/generated/logger.ts","../src/authentication.ts","../src/customClient.ts","../src/generated/isUnexpected.ts","../src/generated/serializeHelper.ts","../src/index.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { createClientLogger } from \"@azure/logger\";\nexport const logger = createClientLogger(\"ai-translation-text\");\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AzureKeyCredential, TokenCredential } from \"@azure/core-auth\";\nimport {\n  PipelinePolicy,\n  PipelineRequest,\n  PipelineResponse,\n  SendRequest,\n} from \"@azure/core-rest-pipeline\";\n\nconst APIM_KEY_HEADER_NAME = \"Ocp-Apim-Subscription-Key\";\nconst APIM_REGION_HEADER_NAME = \"Ocp-Apim-Subscription-Region\";\nconst APIM_RESOURCE_ID = \"Ocp-Apim-ResourceId\";\nexport const DEFAULT_SCOPE = \"https://cognitiveservices.azure.com/.default\";\n\nexport interface TranslatorCredential {\n  key: string;\n  region: string;\n}\n\nexport interface TranslatorTokenCredential {\n  tokenCredential: TokenCredential;\n  region: string;\n  azureResourceId: string;\n}\n\nexport class TranslatorAuthenticationPolicy implements PipelinePolicy {\n  name: string = \"TranslatorAuthenticationPolicy\";\n  credential: TranslatorCredential;\n\n  constructor(credential: TranslatorCredential) {\n    this.credential = credential;\n  }\n\n  sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n    request.headers.set(APIM_KEY_HEADER_NAME, this.credential.key);\n    request.headers.set(APIM_REGION_HEADER_NAME, this.credential.region);\n\n    return next(request);\n  }\n}\n\nexport class TranslatorAzureKeyAuthenticationPolicy implements PipelinePolicy {\n  name: string = \"TranslatorAzureKeyAuthenticationPolicy\";\n  credential: AzureKeyCredential;\n\n  constructor(credential: AzureKeyCredential) {\n    this.credential = credential;\n  }\n\n  sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n    request.headers.set(APIM_KEY_HEADER_NAME, this.credential.key);\n\n    return next(request);\n  }\n}\n\nexport class TranslatorTokenCredentialAuthenticationPolicy implements PipelinePolicy {\n  name: string = \"TranslatorTokenCredentialAuthenticationPolicy\";\n  credential: TranslatorTokenCredential;\n\n  constructor(credential: TranslatorTokenCredential) {\n    this.credential = credential;\n  }\n\n  sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n    request.headers.set(APIM_REGION_HEADER_NAME, this.credential.region);\n    request.headers.set(APIM_RESOURCE_ID, this.credential.azureResourceId);\n\n    return next(request);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { getClient, ClientOptions } from \"@azure-rest/core-client\";\nimport { logger } from \"./generated/logger\";\nimport * as coreRestPipeline from \"@azure/core-rest-pipeline\";\nimport { TextTranslationClient } from \"./generated/clientDefinitions\";\nimport {\n  DEFAULT_SCOPE,\n  TranslatorCredential,\n  TranslatorTokenCredential,\n  TranslatorAuthenticationPolicy,\n  TranslatorAzureKeyAuthenticationPolicy,\n  TranslatorTokenCredentialAuthenticationPolicy,\n} from \"./authentication\";\nimport { AzureKeyCredential, KeyCredential, TokenCredential } from \"@azure/core-auth\";\n\nconst DEFAULT_ENPOINT = \"https://api.cognitive.microsofttranslator.com\";\nconst PLATFORM_HOST = \"cognitiveservices\";\nconst PLATFORM_PATH = \"/translator/text/v3.0\";\n\nfunction isKeyCredential(credential: any): credential is KeyCredential {\n  return (credential as KeyCredential)?.key !== undefined;\n}\n\nfunction isTranslatorKeyCredential(credential: any): credential is TranslatorCredential {\n  return (credential as TranslatorCredential)?.key !== undefined;\n}\n\nfunction isTokenCredential(credential: any): credential is TokenCredential {\n  return (credential as TokenCredential)?.getToken !== undefined;\n}\n\nfunction isTranslatorTokenCredential(credential: any): credential is TranslatorTokenCredential {\n  return (\n    (credential as TranslatorTokenCredential)?.tokenCredential !== undefined &&\n    (credential as TranslatorTokenCredential)?.azureResourceId !== undefined\n  );\n}\n\nfunction isCredentials(credential: any): boolean {\n  return (\n    isKeyCredential(credential) ||\n    isTranslatorKeyCredential(credential) ||\n    isTokenCredential(credential) ||\n    isTranslatorTokenCredential(credential)\n  );\n}\n\n/**\n * Initialize a new instance of `TextTranslationClient`\n * @param credential type: TranslatorCredential | TranslatorTokenCredential | KeyCredential |TokenCredential, credentials\n *      used to authenticate the service with.\n * @param options type: ClientOptions, the parameter for all optional parameters\n */\nexport default function createClient(\n  credential: TranslatorCredential | TranslatorTokenCredential | KeyCredential | TokenCredential,\n  options?: ClientOptions,\n): TextTranslationClient;\n\n/**\n * Initialize a new instance of `TextTranslationClient`\n * @param endpoint type: string, Supported Text Translation endpoints (protocol and hostname, for example:\n *     https://api.cognitive.microsofttranslator.com).\n * @param options type: ClientOptions, the parameter for all optional parameters\n */\nexport default function createClient(\n  endpoint: string,\n  options?: ClientOptions,\n): TextTranslationClient;\n\n/**\n * Initialize a new instance of `TextTranslationClient`\n * @param endpoint type: string, Supported Text Translation endpoints (protocol and hostname, for example:\n *     https://api.cognitive.microsofttranslator.com).\n * @param credential type: TranslatorCredential | TranslatorTokenCredential | KeyCredential |TokenCredential, credentials\n *      used to authenticate the service with.\n * @param options type: ClientOptions, the parameter for all optional parameters\n */\nexport default function createClient(\n  endpoint: string,\n  credential: TranslatorCredential | TranslatorTokenCredential | KeyCredential | TokenCredential,\n  options?: ClientOptions,\n): TextTranslationClient;\n\n// Implementation\nexport default function createClient(\n  arg1?:\n    | string\n    | (TranslatorCredential | TranslatorTokenCredential | KeyCredential | TokenCredential),\n  arg2?:\n    | (TranslatorCredential | TranslatorTokenCredential | KeyCredential | TokenCredential)\n    | ClientOptions,\n  arg3?: ClientOptions,\n): TextTranslationClient {\n  let serviceEndpoint: string;\n\n  let endpoint: string | undefined;\n  let options: ClientOptions | undefined;\n  let credential:\n    | TranslatorCredential\n    | TranslatorTokenCredential\n    | KeyCredential\n    | TokenCredential\n    | undefined;\n\n  if (typeof arg1 === \"string\") {\n    endpoint = arg1;\n  }\n\n  if (typeof arg1 !== \"string\" && isCredentials(arg1)) {\n    credential = arg1;\n    options = arg2 as ClientOptions;\n  } else if (isCredentials(arg2)) {\n    credential = arg2 as\n      | TranslatorCredential\n      | TranslatorTokenCredential\n      | KeyCredential\n      | TokenCredential;\n    options = arg3;\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  options.apiVersion = options.apiVersion ?? \"3.0\";\n\n  if (!endpoint) {\n    serviceEndpoint = DEFAULT_ENPOINT;\n  } else if (endpoint.toLowerCase().indexOf(PLATFORM_HOST) !== -1) {\n    serviceEndpoint = `${endpoint}${PLATFORM_PATH}`;\n  } else {\n    serviceEndpoint = endpoint;\n  }\n\n  const baseUrl = options.baseUrl ?? `${serviceEndpoint}`;\n\n  const userAgentInfo = `azsdk-js-ai-translation-text-rest/1.0.0`;\n  const userAgentPrefix =\n    options.userAgentOptions && options.userAgentOptions.userAgentPrefix\n      ? `${options.userAgentOptions.userAgentPrefix} ${userAgentInfo}`\n      : `${userAgentInfo}`;\n  options = {\n    ...options,\n    userAgentOptions: {\n      userAgentPrefix,\n    },\n    loggingOptions: {\n      logger: options.loggingOptions?.logger ?? logger.info,\n    },\n  };\n\n  const client = getClient(baseUrl, options) as TextTranslationClient;\n\n  if (isTranslatorKeyCredential(credential)) {\n    const mtAuthneticationPolicy = new TranslatorAuthenticationPolicy(\n      credential as TranslatorCredential,\n    );\n    client.pipeline.addPolicy(mtAuthneticationPolicy);\n  } else if (isKeyCredential(credential)) {\n    const mtKeyAuthenticationPolicy = new TranslatorAzureKeyAuthenticationPolicy(\n      credential as AzureKeyCredential,\n    );\n    client.pipeline.addPolicy(mtKeyAuthenticationPolicy);\n  } else if (isTokenCredential(credential)) {\n    client.pipeline.addPolicy(\n      coreRestPipeline.bearerTokenAuthenticationPolicy({\n        credential: credential as TokenCredential,\n        scopes: options?.credentials?.scopes ?? DEFAULT_SCOPE,\n      }),\n    );\n  } else if (isTranslatorTokenCredential(credential)) {\n    client.pipeline.addPolicy(\n      coreRestPipeline.bearerTokenAuthenticationPolicy({\n        credential: (credential as TranslatorTokenCredential).tokenCredential,\n        scopes: options?.credentials?.scopes ?? DEFAULT_SCOPE,\n      }),\n    );\n    client.pipeline.addPolicy(\n      new TranslatorTokenCredentialAuthenticationPolicy(credential as TranslatorTokenCredential),\n    );\n  }\n\n  return client;\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  GetSupportedLanguages200Response,\n  GetSupportedLanguagesDefaultResponse,\n  Translate200Response,\n  TranslateDefaultResponse,\n  Transliterate200Response,\n  TransliterateDefaultResponse,\n  FindSentenceBoundaries200Response,\n  FindSentenceBoundariesDefaultResponse,\n  LookupDictionaryEntries200Response,\n  LookupDictionaryEntriesDefaultResponse,\n  LookupDictionaryExamples200Response,\n  LookupDictionaryExamplesDefaultResponse,\n} from \"./responses.js\";\n\nconst responseMap: Record<string, string[]> = {\n  \"GET /languages\": [\"200\"],\n  \"POST /translate\": [\"200\"],\n  \"POST /transliterate\": [\"200\"],\n  \"POST /breaksentence\": [\"200\"],\n  \"POST /dictionary/lookup\": [\"200\"],\n  \"POST /dictionary/examples\": [\"200\"],\n};\n\nexport function isUnexpected(\n  response:\n    | GetSupportedLanguages200Response\n    | GetSupportedLanguagesDefaultResponse,\n): response is GetSupportedLanguagesDefaultResponse;\nexport function isUnexpected(\n  response: Translate200Response | TranslateDefaultResponse,\n): response is TranslateDefaultResponse;\nexport function isUnexpected(\n  response: Transliterate200Response | TransliterateDefaultResponse,\n): response is TransliterateDefaultResponse;\nexport function isUnexpected(\n  response:\n    | FindSentenceBoundaries200Response\n    | FindSentenceBoundariesDefaultResponse,\n): response is FindSentenceBoundariesDefaultResponse;\nexport function isUnexpected(\n  response:\n    | LookupDictionaryEntries200Response\n    | LookupDictionaryEntriesDefaultResponse,\n): response is LookupDictionaryEntriesDefaultResponse;\nexport function isUnexpected(\n  response:\n    | LookupDictionaryExamples200Response\n    | LookupDictionaryExamplesDefaultResponse,\n): response is LookupDictionaryExamplesDefaultResponse;\nexport function isUnexpected(\n  response:\n    | GetSupportedLanguages200Response\n    | GetSupportedLanguagesDefaultResponse\n    | Translate200Response\n    | TranslateDefaultResponse\n    | Transliterate200Response\n    | TransliterateDefaultResponse\n    | FindSentenceBoundaries200Response\n    | FindSentenceBoundariesDefaultResponse\n    | LookupDictionaryEntries200Response\n    | LookupDictionaryEntriesDefaultResponse\n    | LookupDictionaryExamples200Response\n    | LookupDictionaryExamplesDefaultResponse,\n): response is\n  | GetSupportedLanguagesDefaultResponse\n  | TranslateDefaultResponse\n  | TransliterateDefaultResponse\n  | FindSentenceBoundariesDefaultResponse\n  | LookupDictionaryEntriesDefaultResponse\n  | LookupDictionaryExamplesDefaultResponse {\n  const lroOriginal = response.headers[\"x-ms-original-url\"];\n  const url = new URL(lroOriginal ?? response.request.url);\n  const method = response.request.method;\n  let pathDetails = responseMap[`${method} ${url.pathname}`];\n  if (!pathDetails) {\n    pathDetails = getParametrizedPathSuccess(method, url.pathname);\n  }\n  return !pathDetails.includes(response.status);\n}\n\nfunction getParametrizedPathSuccess(method: string, path: string): string[] {\n  const pathParts = path.split(\"/\");\n\n  // Traverse list to match the longest candidate\n  // matchedLen: the length of candidate path\n  // matchedValue: the matched status code array\n  let matchedLen = -1,\n    matchedValue: string[] = [];\n\n  // Iterate the responseMap to find a match\n  for (const [key, value] of Object.entries(responseMap)) {\n    // Extracting the path from the map key which is in format\n    // GET /path/foo\n    if (!key.startsWith(method)) {\n      continue;\n    }\n    const candidatePath = getPathFromMapKey(key);\n    // Get each part of the url path\n    const candidateParts = candidatePath.split(\"/\");\n\n    // track if we have found a match to return the values found.\n    let found = true;\n    for (\n      let i = candidateParts.length - 1, j = pathParts.length - 1;\n      i >= 1 && j >= 1;\n      i--, j--\n    ) {\n      if (\n        candidateParts[i]?.startsWith(\"{\") &&\n        candidateParts[i]?.indexOf(\"}\") !== -1\n      ) {\n        const start = candidateParts[i]!.indexOf(\"}\") + 1,\n          end = candidateParts[i]?.length;\n        // If the current part of the candidate is a \"template\" part\n        // Try to use the suffix of pattern to match the path\n        // {guid} ==> $\n        // {guid}:export ==> :export$\n        const isMatched = new RegExp(\n          `${candidateParts[i]?.slice(start, end)}`,\n        ).test(pathParts[j] || \"\");\n\n        if (!isMatched) {\n          found = false;\n          break;\n        }\n        continue;\n      }\n\n      // If the candidate part is not a template and\n      // the parts don't match mark the candidate as not found\n      // to move on with the next candidate path.\n      if (candidateParts[i] !== pathParts[j]) {\n        found = false;\n        break;\n      }\n    }\n\n    // We finished evaluating the current candidate parts\n    // Update the matched value if and only if we found the longer pattern\n    if (found && candidatePath.length > matchedLen) {\n      matchedLen = candidatePath.length;\n      matchedValue = value;\n    }\n  }\n\n  return matchedValue;\n}\n\nfunction getPathFromMapKey(mapKey: string): string {\n  const pathStart = mapKey.indexOf(\"/\");\n  return mapKey.slice(pathStart);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport function buildMultiCollection(\n  items: string[],\n  parameterName: string,\n): string {\n  return items\n    .map((item, index) => {\n      if (index === 0) {\n        return item;\n      }\n      return `${parameterName}=${item}`;\n    })\n    .join(\"&\");\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport TextTranslationClient from \"./customClient\";\n\nexport * from \"./customClient\";\nexport * from \"./generated/parameters\";\nexport * from \"./generated/responses\";\nexport * from \"./generated/clientDefinitions\";\nexport * from \"./generated/isUnexpected\";\nexport * from \"./generated/models\";\nexport * from \"./generated/outputModels\";\nexport * from \"./generated/serializeHelper\";\nexport { TranslatorCredential, TranslatorTokenCredential } from \"./authentication\";\n\nexport default TextTranslationClient;\n"],"names":["createClientLogger","getClient","coreRestPipeline"],"mappings":"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"}